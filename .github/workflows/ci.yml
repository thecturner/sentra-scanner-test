name: CI · Terraform & Docker

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  TERRAFORM_VERSION: 1.9.5
  TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY || '' }}

jobs:
  iac_scans:
    name: IaC scans (static analysis)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install scanners
        run: |
          pip install checkov yamllint bandit pip-audit ruff
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
          curl -fsSL https://github.com/tenable/terrascan/releases/latest/download/terrascan_Linux_X86_64.tar.gz | tar xz && sudo mv terrascan /usr/local/bin/

      - name: Terraform validate (root)
        run: terraform -chdir=. validate -no-color || true

      - name: Run TFLint
        run: tflint .

      - name: Checkov scan
        run: checkov -d .

      - name: Terrascan (Terraform/AWS)
        run: terrascan scan -t aws -i terraform -d .

      - name: Trivy config scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: config
          severity: CRITICAL,HIGH
          hide-progress: true

      - name: actionlint (workflow lint)
        run: ./actionlint -color

      - name: YAML lint (workflows)
        run: yamllint .github/workflows

      - name: Python linters (ruff, bandit, pip-audit)
        run: |
          ruff check scanner.py
          bandit -q -r scanner.py || true
          pip-audit || true

  # -------------------- 1) infra/ (plan on PR, apply on push) --------------------
  tf_infra:
    name: Terraform · infra/ (plan on PR, apply on push)
    runs-on: ubuntu-latest
    needs: [ iac_scans ]
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Terraform in infra/
        id: detect_infra
        run: |
          if [ -d infra ] && git ls-files "infra/**/*.tf" | grep -q . ; then
            echo "has_infra=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_infra=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials (OIDC)
        if: steps.detect_infra.outputs.has_infra == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform ${{ env.TERRAFORM_VERSION }}
        if: steps.detect_infra.outputs.has_infra == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: terraform init (infra/)
        if: steps.detect_infra.outputs.has_infra == 'true'
        run: terraform init -input=false

      - name: terraform plan (infra/)
        if: steps.detect_infra.outputs.has_infra == 'true'
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Upload plan (infra/)
        if: steps.detect_infra.outputs.has_infra == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: infra-tfplan
          path: infra/tfplan

      - name: terraform apply (infra/) — only on push
        if: steps.detect_infra.outputs.has_infra == 'true' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

  # -------------------- 2) test/ (plan on PR, apply on push) --------------------
  tf_test:
    name: Terraform · test/ (plan on PR, apply on push)
    runs-on: ubuntu-latest
    needs: [ tf_infra ]
    defaults:
      run:
        working-directory: test
    env:
      AWS_REGION: ${{ env.AWS_REGION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform ${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Write test/vars.tfvars from secret TFVARS_TEST
        id: write_vars
        shell: bash
        run: |
          umask 077
          if [ -n "${{ secrets.TFVARS_TEST }}" ]; then
            cat > vars.tfvars <<'EOF'
            ${{ secrets.TFVARS_TEST }}
            EOF
            echo "have_vars=true" >> "$GITHUB_OUTPUT"
          else
            echo "TFVARS_TEST is empty or unavailable (e.g., forked PR)."
            echo "have_vars=false" >> "$GITHUB_OUTPUT"
          fi

      - name: terraform init (test/)
        run: terraform init -input=false

      - name: terraform plan (test/)
        if: steps.write_vars.outputs.have_vars == 'true'
        run: terraform plan -input=false -no-color -var-file=vars.tfvars -out=tfplan

      - name: Upload plan (test/)
        if: steps.write_vars.outputs.have_vars == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-tfplan
          path: test/tfplan

      - name: terraform apply (test/) — only on push
        if: steps.write_vars.outputs.have_vars == 'true' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

  # -------------------- 3) root/ (plan on PR, apply on push) --------------------
  tf_root:
    name: Terraform · root/ (plan on PR, apply on push)
    runs-on: ubuntu-latest
    needs: [ tf_test ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform ${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: terraform init (root)
        run: terraform init -input=false

      - name: terraform plan (root)
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Upload plan (root)
        uses: actions/upload-artifact@v4
        with:
          name: root-tfplan
          path: tfplan

      - name: terraform apply (root) — only on push
        if: github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

  # -------------------- Docker build (after TF) --------------------
  docker_build_and_test:
    name: Docker build and smoke test
    runs-on: ubuntu-latest
    needs: [ tf_root ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: sentra-scanner-test:${{ github.sha }}

      - name: Container smoke test
        run: |
          set -e
          if docker run --rm sentra-scanner-test:${{ github.sha }} python -V; then
            echo "Python present. Container started."
          else
            echo "Python not found. Trying a generic shell smoke test."
            docker run --rm sentra-scanner-test:${{ github.sha }} sh -c 'echo container_ok'
          fi

      - name: Validate docker-compose.yml (optional)
        run: |
          if [ -f docker-compose.yml ]; then
            docker compose config
          else
            echo "No docker-compose.yml. Skipping."
