name: CI. Terraform plan and Docker build

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
  workflow_dispatch:
  # Re-run CI after Bootstrap OIDC finishes; jobs are gated below to run only on success.
  workflow_run:
    workflows: ["Bootstrap OIDC"]
    types: [completed]

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  TERRAFORM_VERSION: 1.9.5
  TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY || '' }}
  # Bootstrap writes this as a secret and a repo variable; steps can read env.*,
  # but job-level "if" must use vars.* (secrets are not available there).
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}

jobs:
  iac_scans:
    # Donâ€™t run if the triggering workflow_run (Bootstrap OIDC) failed
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    name: IaC scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install scanners
        run: |
          pip install checkov yamllint bandit pip-audit ruff
          # pin tflint to a specific version
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | TFLINT_VERSION=v0.59.1 bash
          # actionlint
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
          # Terrascan
          curl -sSfL https://raw.githubusercontent.com/tenable/terrascan/master/scripts/install.sh | sudo bash -s -- -b /usr/local/bin v1.18.3
          terrascan version

      - name: Detect Terraform files
        id: has_tf
        run: |
          if git ls-files "*.tf" | grep -q . ; then
            echo "has_tf=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_tf=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Terraform CLI
        if: steps.has_tf.outputs.has_tf == 'true'
        env:
          TF_VER: ${{ env.TERRAFORM_VERSION }}
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y unzip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_amd64.zip" -o tf.zip
          unzip -o tf.zip
          sudo mv terraform /usr/local/bin/terraform
          terraform -version

      - name: Terraform init (read-only)
        if: steps.has_tf.outputs.has_tf == 'true'
        run: terraform -chdir=. init -backend=false -input=false

      - name: Terraform validate (root)
        if: steps.has_tf.outputs.has_tf == 'true'
        run: terraform -chdir=. validate -no-color

      - name: TFLint (init plugins + recursive scan)
        run: |
          tflint --init
          tflint --recursive

      - name: Checkov
        run: checkov -d .

      - name: Terrascan
        run: terrascan scan -t aws -i terraform -d .

      - name: Trivy config
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: config
          severity: CRITICAL,HIGH
          hide-progress: true

      - name: actionlint
        run: ./actionlint -color

      - name: YAML lint
        run: yamllint .github/workflows

      - name: Python linters
        run: |
          ruff check scanner.py
          bandit -q -r scanner.py || true
          pip-audit || true

  terraform_plan:
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    name: Terraform fmt validate plan
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Detect Terraform files
        id: detect_tf
        run: |
          if git ls-files "*.tf" | grep -q . ; then
            echo "has_tf=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_tf=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install tools needed by your helper script
        if: steps.detect_tf.outputs.has_tf == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          chmod +x get_my_ip.sh || true

      - name: Setup Terraform
        if: steps.detect_tf.outputs.has_tf == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: terraform fmt (check)
        if: steps.detect_tf.outputs.has_tf == 'true'
        run: terraform fmt -check -recursive

      - name: terraform init (no backend)
        if: steps.detect_tf.outputs.has_tf == 'true'
        run: terraform init -backend=false -input=false

      - name: terraform validate
        if: steps.detect_tf.outputs.has_tf == 'true'
        run: terraform validate -no-color

      # Only plan if the OIDC role is available (either secret or variable)
      - name: Configure AWS credentials via OIDC
        if: steps.detect_tf.outputs.has_tf == 'true' && env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: terraform plan (online)
        if: steps.detect_tf.outputs.has_tf == 'true' && env.AWS_ROLE_ARN != ''
        run: terraform plan -input=false -no-color -out=tfplan

      - name: "Note: skipping plan (OIDC not bootstrapped)"
        if: steps.detect_tf.outputs.has_tf == 'true' && env.AWS_ROLE_ARN != ''
        run: echo "Skipping online plan because AWS_ROLE_ARN is not set. Run Bootstrap OIDC first."

  # 1) test/ (AWS gated)
  tf_test:
    # Job-level if can't use env/secrets; use vars here.
    if: (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') && vars.AWS_ROLE_ARN != ''
    runs-on: ubuntu-latest
    needs: [ iac_scans ]
    permissions:
      contents: read
      id-token: write
    env:
      TF_VAR_test_bucket_names: '["ct-test-a","ct-test-b","ct-test-c"]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: terraform init (test/)
        run: terraform -chdir=test init -input=false

      - name: terraform plan/apply (test/)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            terraform -chdir=test plan -input=false -no-color -out=tfplan
          else
            terraform -chdir=test apply -auto-approve
          fi

  # 2) root/ (AWS gated, after test/)
  tf_root:
    if: (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') && vars.AWS_ROLE_ARN != ''
    runs-on: ubuntu-latest
    needs: [ tf_test ]
    permissions:
      contents: read
      id-token: write
    env:
      TF_VAR_results_bucket_name: "sentra-results-bucket-ct-us-east1-20250822"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: terraform init (root)
        run: terraform -chdir=. init -input=false

      - name: terraform plan/apply (root)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            terraform -chdir=. plan -input=false -no-color -out=tfplan
          else
            terraform -chdir=. apply -auto-approve
          fi

  docker_build_and_test:
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    name: Docker build and smoke test
    runs-on: ubuntu-latest
    needs: [ tf_root ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: sentra-scanner-test:${{ github.sha }}

      - name: Container smoke test
        run: |
          set -e
          if docker run --rm sentra-scanner-test:${{ github.sha }} python -V; then
            echo "Python present. Container started."
          else
            echo "Python not found. Trying a generic shell smoke test."
            docker run --rm sentra-scanner-test:${{ github.sha }} sh -c 'echo container_ok'
          fi

      - name: Validate docker-compose.yml
        run: |
          if [ -f docker-compose.yml ]; then
            docker compose config
          else
            echo "No docker-compose.yml. Skipping validation."
          fi
